#!/usr/bin/env python3
# Copyright (c) 2023 Rick-v-E.
#
# This file is part of the ROS2 Motionmind Hardware Interface
# (see https//github.com/Rick-v-E/motionmind_hardware).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

from __future__ import annotations

from serial import Serial


class BitArray:
    """
    Source: https://stackoverflow.com/questions/34496234/is-there-a-builtin-bitset-thats-similar-to-the-stdbitset-from-c
    """

    def __init__(self, lenght: int) -> None:
        self.values = bytearray(b"\x00" * (lenght // 8 + (1 if lenght % 8 else 0)))
        self.lenght = lenght

    def __setitem__(self, index: int, value: int) -> None:
        value = int(bool(value)) << index % 8
        mask = 0xFF ^ index % 8
        self.values[index // 8] &= mask
        self.values[index // 8] |= value

    def __getitem__(self, index: int) -> bool:
        mask = 1 << index % 8
        return bool(self.values[index // 8] & mask)

    def __len__(self) -> int:
        return self.lenght

    def __repr__(self) -> str:
        return "<{}>".format(", ".join("{:d}".format(value) for value in self))


def to_motionmind_cmd(command: int, address: int, value: int | BitArray | list[int], byte_length: int = 4) -> list[int]:
    if isinstance(value, BitArray):
        data = list(value.values)  
    elif isinstance(value, list):
        data = value
    else:
        data = list(value.to_bytes(byte_length, "little"))

    checksum = (command + address + sum(data)).to_bytes(byte_length + 2, "little")[0]
    return [command, address, *data, checksum]

def get_register_value(connection: Serial, address: int, index: int, byte_length: int) -> int:
    _COMMAND = 26
  
    registry_array = BitArray(32)
    registry_array[index] = 1

    cmd_array = to_motionmind_cmd(_COMMAND, address, registry_array, byte_length=4)
    connection.write(cmd_array)

    result = connection.read(byte_length + 2)

    return int.from_bytes(result[1 : byte_length + 1], byteorder="little")

def set_register_value(connection: Serial, address: int, index: int, byte_length: int, value: int) -> bool:
    _COMMAND = 24
    
    cmd = [index] + list(value.to_bytes(byte_length, "little"))
    cmd_array = to_motionmind_cmd(_COMMAND, address, cmd, byte_length=4)

    connection.write(cmd_array)

    return connection.read(1) == b"\x06"


if __name__ == "__main__":
    from argparse import ArgumentParser

    parser = ArgumentParser(description="Tool to check a single MotionMind Rev3 motorcontroller.")
    parser.add_argument(
        "address",
        type=int,
        help="Address of the motorcontroller.",
    )
    parser.add_argument(
        "--device",
        type=str,
        help="Device string of the motorcontroller.",
        default="/dev/ttyS0",
    )
    parser.add_argument("--baudrate", type=int, help="Baudrate of serial connection", default=19200)
    parser.add_argument("--timeout", type=float, help="Timeout for ")
    args = parser.parse_args()

    connection = Serial(args.device, args.baudrate, timeout=2)

    if connection.isOpen():
        connection.close()

    connection.open()

    p_value = get_register_value(connection, args.address, 4, 2)
    i_value = get_register_value(connection, args.address, 5, 2)
    d_value = get_register_value(connection, args.address, 6, 2)

    print(f"Current PID settings:\n\tP-term: {p_value}\n\tI-term: {i_value}\n\tD-term: {d_value}")

    answer = input(f"Do you want to update the P-term? [n/y]? ")
    if answer.lower() == "y":
        new_p_value = int(input(f"New P-value: "))

        if not set_register_value(connection, args.address, 4, 2, new_p_value):
            print("ERROR: could not write new P-value to motor controller!")

    answer = input(f"Do you want to update the I-term? [n/y]? ")
    if answer.lower() == "y":
        new_i_value = int(input(f"New I-value: "))

        if not set_register_value(connection, args.address, 5, 2, new_i_value):
            print("ERROR: could not write new P-value to motor controller!")

    answer = input(f"Do you want to update the D-term? [n/y]? ")
    if answer.lower() == "y":
        new_d_value = int(input(f"New D-value: "))

        if not set_register_value(connection, args.address, 6, 2, new_d_value):
            print("ERROR: could not write new P-value to motor controller!")

    p_value = get_register_value(connection, args.address, 4, 2)
    i_value = get_register_value(connection, args.address, 5, 2)
    d_value = get_register_value(connection, args.address, 6, 2)

    print(f"Current PID settings:\n\tP-term: {p_value}\n\tI-term: {i_value}\n\tD-term: {d_value}")